const debug = require('debug')('render:renderer');

import { getFooter, getHeader } from './html-template';

const IN_MAINTENANCE_MODE = process.env.REACT_APP_MAINTENANCE_MODE === 'enabled';
const IS_PROD = process.env.NODE_ENV === 'production';
const FORCE_DEV = process.env.FORCE_DEV;
const FIVE_MINUTES = 300;
const ONE_HOUR = 3600;

const renderer = (req, res) => {
	res.setHeader('Content-Type', 'text/html; charset=utf-8');

	if (IN_MAINTENANCE_MODE) {
		res.status(500);
		res.send(
			`<!DOCTYPE html><html><head><title>Blikside</title> <style>body{margin: 0;}html{-webkit-font-smoothing: antialiased; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';}h1, p{line-height: 1.5;}.container{background: rgb(56,24,229);background: linear-gradient(90deg, rgba(56,24,229,1) 0%, rgba(56,24,229,0.8029586834733894) 52%, rgba(56,24,229,1) 100%); width: 100%; display: flex; height: 100vh; justify-content: center;}.item{color: white; font-weight: bold; align-self: center; text-align: center;}a{color: white;}span{font-size: 40px; padding: 0; margin: 0;}</style></head><body> <div class="container"> <div class="item"> <span>üõ†</span> <h1>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.</h1> <p>–ú—ã —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è.</p></div></div></body></html>`
		);
		return;
	}

	debug(`server-side render ${req.url}`);
	debug(`querying API at https://${req.hostname}/api`);

	// Get the nonce attached to every request
	// This nonce is generated by our security middleware
	const nonce = typeof res.locals.nonce === 'string' ? res.locals.nonce : undefined;

	// if (!nonce) throw new Error('Security nonce not set.');

	// maintainance mode
	if (IN_MAINTENANCE_MODE) {
		debug('maintainance mode enabled, sending 503');
		res.status(503);
		res.set('Retry-After', '3600');
	} else {
		res.status(200);
	}

	if (!req.user) {
		res.setHeader('Cache-Control', `s-maxage=${ONE_HOUR}, stale-while-revalidate=${FIVE_MINUTES}, must-revalidate`);
	} else {
		res.setHeader('Cache-Control', 's-maxage=0');
	}

	// res.write(
	//   getHeader({
	//     metaTags: null,
	//     nonce: nonce,
	//   })
	// );
	//
	// const data = {};
	//
	// res.end(
	//   getFooter({
	//     data,
	//     nonce: nonce,
	//   })
	// );

	res.sendFile();
};

export default renderer;
